{"version":3,"sources":["../client/app.jsx"],"names":["Card","classes","console","log","props","isRevealed","color","value","React","Component","Board","words","map","row","indexRow","card","indexCol","colors","InfoBoard","isBluesTurn","e","preventDefault","handleRevealClick","Game","state","bind","setState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"app.js","sourcesContent":["\nclass Card extends React.Component {\n  render() {\n    var classes = 'card';\n    console.log('in card', this.props.isRevealed)\n    if (this.props.isRevealed) {\n      classes += ` ${this.props.color}b`;\n    }\n    return (\n      <td className={classes}>{this.props.value}</td>\n    )\n  }\n}\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <table className=\"board\">\n        <tbody>\n          {this.props.words.map((row, indexRow) => {\n            return (\n              <tr key={indexRow}>\n                {row.map((card, indexCol) => <Card\n                  value={card}\n                  key={indexRow * 6 + indexCol}\n                  isRevealed={this.props.isRevealed} color={this.props.colors[indexRow][indexCol]} />)}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nclass InfoBoard extends React.Component {\n  render() {\n    return (\n      <div className=\"infoboard\">\n        <div className=\"player\">Team {this.props.isBluesTurn ? 'Blue' : 'Red'}'s turn</div>\n        <button className=\"revealbutton\" onClick={(e) => {\n          e.preventDefault();\n          this.props.handleRevealClick()\n        }}>Reveal</button>\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isBluesTurn: true,\n      words: [\n        ['ball', 'fish', 'track', 'maple', 'pole'],\n        ['sink', 'apple', 'spell', 'kid', 'cab'],\n        ['lemon', 'scientist', 'whip', 'coffee', 'cat'],\n        ['leaf', 'dance', 'princess', 'net', 'Europe'],\n        ['water', 'yellow', 'bridge', 'watermelon', 'tea']\n      ],\n      colors: [\n        ['blue', 'blue', 'red', 'yellow', 'yellow'],\n        ['red', 'black', 'blue', 'red', 'blue'],\n        ['red', 'blue', 'red', 'yellow', 'yellow'],\n        ['blue', 'blue', 'red', 'blue', 'yellow'],\n        ['yellow', 'yellow', 'red', 'blue', 'red']\n      ],\n      isRevealed: false\n    }\n    this.handleRevealClick = this.handleRevealClick.bind(this);\n  }\n\n  handleRevealClick() {\n    this.setState({\n      isRevealed: !this.state.isRevealed\n    }, () => console.log(this.state.isRevealed))\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1>Codenames</h1>\n        </div>\n        <Board words={this.state.words} isRevealed={this.state.isRevealed} colors={this.state.colors} />\n        <InfoBoard\n          isBluesTurn={this.state.isBluesTurn}\n          handleRevealClick={this.handleRevealClick} />\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(<Game />, document.getElementById('app'));"]}